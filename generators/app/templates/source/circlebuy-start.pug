extends ./layout/layout_main.pug

block css
  style.
    .logged-in {
      display: block !important;
    }
    .logged-out {
      display: none;
    }
  //- style


block content

  section.userprofile.request-list.simple(ng-app="myApp" ng-controller="myCtrl" ng-cloak)
    .container
      .row
        .col-md-12
          h3.title(ng-hide="!creating_a_new_circlebuy")
            | Create a circlebuy for
            =" "
            strong {{variant.name}}
          h3.title(ng-hide="creating_a_new_circlebuy")
            | Join circlebuy for
            =" "
            strong {{variant.name}}
        //- col-md-12
      //- row

      .card(ng-hide="loggedIn" role="alert")
        .row
          .col-md-12
            // Alert box for login
            .alert.alert-danger
              // span.glyphicon.glyphicon-exclamation-sign(aria-hidden="true")
              span Please Log in to create or join a Circlebuy
            //- alert
          //- col-md-12
        //- row
      //- card

      .card
        .row
          .col-md-9
            // Alert box for order size
            .alert(ng-hide="showOrderSizeAlert()" role="alert").alert-danger
              // span.glyphicon.glyphicon-exclamation-sign(aria-hidden="true")
              span Please select an Order Size
            //- alert
            p
            .form-group(id="so_new_orderSize_group" style="width:200px;").has-feedback
              label(for="so_new_orderSize").control-label Order Size

              // Display for new Circlebuy
              select(ng-hide="!creating_a_new_circlebuy" ng-model="so_new_orderSize" ng-change="orderSizeChanged()").form-control.form-control
                option(ng-repeat="pq in pricingQuantityList" value="{{pq.quantity}}" selected="selected") {{pq.quantity}} cases
              //- select
              span(id="so_new_orderSize_glyphicon").glyphicon.form-control-feedback

              // Display for existing Circlebuy
              p(ng-hide="creating_a_new_circlebuy") {{so_existing_orderSize}} Cases
            //- p
            p.text-warning * All circlebuys will expire after 3 days from commencement if not completed.
          //- col-md-9
          .col-md-3
            .alert.alert-warning.countdown
              | circlebuy duration
              hr
              h2 72hrs
              //- h2
            //- alert
          //- col-md-3
        //- row
      //- card
      br



      // "Your Order" section of the page
      h4 Your Order
      .card
        .row
          .col-md-12
            // Alert box
            .alert(ng-hide="showYourQuantityAlert()" role="alert").alert-danger
              // span.glyphicon.glyphicon-exclamation-sign(aria-hidden="true")
              span.sr-only Error:
              span(id="order-alert-msg") Please select Your Quantity
            //- .alert
        .row
          .col-md-4
            .form-group
              label Item
              p.form-control-static {{variant.name}}
              br
              .card
                small Pack size: {{variant.componentsQty}}
                div(ng-hide="creating_a_new_circlebuy")
                  small {{so_alreadyOrdered}} cases already ordered
                  br
                  small {{so_existing_orderSize-so_alreadyOrdered}} cases required to complete the order
            //- form-group
            .form-group(ng-hide="true")
              label Pack Size
              p.form-control-static {{variant.componentsQty}} bottles
            //- form-group
            br
            br

          //- col-md-4

          // "Your Quantity" section
          .col-md-3
            .form-group(id="so_yourQuantity_group").has-feedback
              label Your quantity
              select.form-control(ng-model="so_yourQuantity")
                option(ng-repeat="i in rangeForYourQuantity() track by $index" value="{{$index+1}}") {{$index+1}} cases
              //- select
              span(id="so_yourQuantity_glyphicon" style="zpadding-left:10px;zright:auto;").glyphicon.form-control-feedback
            //- form-group
            // Alert box
            .alert(ng-hide=" !enoughToCompeteTheOrder()" role="alert").alert-success
              // span.glyphicon.glyphicon-exclamation-sign(aria-hidden="true")
              span.sr-only Error:
              span(id="order-alert-msg")
              | Wonderful.
              | We'll be able to complete the Circlebuy right now!
            //- .alert
          //- .col-md-3



          //- col-md-4

          // Price calculation section
          .col-md-5
            .table-responsive
              table.table
                thead
                  tr
                    th Price
                    th Subtotal
                  //- tr
                //- thead
                tbody
                  tr
                    td
                      .shared-order-calc-field {{calc_price}}
                    td
                      .shared-order-calc-field {{calc_subtotal}}
                  //- tr
                  tr
                    td(colspan='2')
                      br
                    //- td
                  //- tr
                  tr
                    td Subtotal
                    td
                      .shared-order-calc-field {{calc_subtotal}}
                  //- tr
                  tr
                    td Shipping
                    td
                      .shared-order-calc-field {{calc_shipping}}
                  //- tr
                  tr
                    td GST
                    td
                      .shared-order-calc-field {{calc_gst}}
                  //- tr
                  tr
                    td(colspan='2')
                      br
                    //- td
                  //- tr
                  tr
                    td
                      strong Grand Total (Incl. GST)
                    //- td
                    td
                      strong
                        .shared-order-calc-field {{calc_grandTotal}}
                    //- td
                  //- tr
                //- tbody
              //- table
            //- table-responsive
            
          //- col-md-4
        //- row
        
        
        // Display the savings
        .row(ng-hide="!calc_totalSavings || calc_totalSavings == '-'")
          .col-md-6.text-center.col-md-offset-3
            h3.green.text-center Why you love Drink Circle...
            br
            .text-justify
              | RRP for this product is {{calc_rrp}} per case, but&nbsp;
              span.inline(ng-hide="calc_savingsDirect == '-'")
                | {{calc_savingsDirectPrefix}}
                .green.inline {{calc_savingsDirect}}&nbsp;
                | a case by buying direct from the drink maker
              span.inline(ng-hide="calc_savingsVolume == '-'")
                | {{calc_savingsVolumePrefix}}
                .green.inline {{calc_savingsVolume}}&nbsp;
                | a case by buying in bulk with your friends
              span.inline(ng-hide="calc_savingsShipping == '-'")
                | {{calc_savingsShippingPrefix}}
                .green.inline {{calc_savingsShipping}}&nbsp;
                | a case by shipping to the same address
              span.inline .
                
              br
              br
            strong.text-center
              | The total savings on this order will be
              .green.inline {{calc_totalSavings}}
              | .
              br
              br
              
      
        //- .row
        
      //- card
      br
      h4 Your Details
      .card

        // Date of Birth
        .alert(ng-hide="haveValidDateOfBirth()" role="alert").alert-danger
          // span.glyphicon.glyphicon-exclamation-sign(aria-hidden="true")
          span {{dateOfBirthMessage}}
        //- alert
        p
          label Date of Birth *
        .row
          .col-md-12
            .form-group
              //input.form-control(type='date' ng-model="so_dateOfBirth")
              label.checkbox-inline
                input(type='checkbox' ng-model="so_over18")
                | &nbsp;I am more than 18 years old
            //- form-group
          //- col-md-4
        //- .row
        p Drinkcircle supports prohibiting the sale of alcohol and tobacco to minors.
        hr


        //- // Billing Address
        //- .alert(ng-hide="haveBillingAddress()" role="alert").alert-danger
        //-   // span.glyphicon.glyphicon-exclamation-sign(aria-hidden="true")
        //-   span Please select a billing address
        //- //- alert
        //- p
        //-   strong Billing Details
        //- //- p
        //- .row
        //-   .col-md-3.so_billing_address_card(ng-click="setBillingAddress(10)" so_address_id="10")
        //-     .alert.alert-warning
        //-       a.text-danger.pull-right(href='#modal_coming_soon', data-toggle='modal')
        //-         i.fa.fa-times-circle
        //-       //- a
        //-       .clearfix
        //-       p
        //-         | John Jones
        //-         br
        //-         | 423 5678
        //-         br
        //-         | 19 Beaudesert Rd. Brisbane,
        //-         br
        //-         | QLD 4757
        //-       //- p
        //-     //- alert
        //-   //- col-md-3
        //-   .col-md-3.so_billing_address_card(ng-click="setBillingAddress(11)" so_address_id="11")
        //-     .alert.alert-warning
        //-       a.text-danger.pull-right(href='#modal_coming_soon', data-toggle='modal')
        //-         i.fa.fa-times-circle
        //-       //- a
        //-       .clearfix
        //-       p
        //-         | John Jones
        //-         br
        //-         | 423 5678
        //-         br
        //-         | 32 Darwin St. North Brisbane,
        //-         br
        //-         | QLD 4747
        //-       //- p
        //-     //- alert
        //-   //- col-md-3
        //- //- .row
        //- a.btn.btn-success.btn-sm(href='#modal_coming_soon', data-toggle='modal') Add a new address
        //- hr

        // Ship-To address
        .alert(ng-hide="haveShiptoAddress()" role="alert").alert-danger
          // span.glyphicon.glyphicon-exclamation-sign(aria-hidden="true")
          span Please select a Ship To address
        //- alert
        p
          label Ship to
        .row
          .col-md-4
            .form-group
              select.form-control
                option Other
              //- select
            //- form-group
          //- col-md-4
        //- row
        .row
          .col-md-3.so_shipto_address_card(ng-click="setShiptoAddress(12)" so_address_id="12")
            .alert.alert-warning
              a.text-danger.pull-right(href='#modal_coming_soon', data-toggle='modal')
                i.fa.fa-times-circle
              //- a
              .clearfix
              p
                | John Jones
                br
                | 423 5678
                br
                | 19 Beaudesert Rd. Brisbane,
                br
                | QLD 4757
              //- p
            //- alert
          //- col-md-3
          .col-md-3.so_shipto_address_card(ng-click="setShiptoAddress(13)" so_address_id="13")
            .alert.alert-warning
              a.text-success.pull-right(href='#modal_coming_soon', data-toggle='modal')
                i.fa.fa-times-circle
              //- a
              .clearfix
              p
                | John Jones
                br
                | 423 5678
                br
                | 32 Darwin St. North Brisbane,
                br
                | QLD 4747
              //- p
            //- alert
          //- col-md-3
        //- .row
        a.btn.btn-success.btn-sm(href='#modal_coming_soon', data-toggle='modal') Add a new address
        hr
        .row
          .col-md-4
            .form-group
              label Authority to Leave
              select.form-control
                option Yes
              //- select
            //- form-group
          //- col-md-4
          .col-md-12
            .form-group
              label Comment for delivery
              textarea.form-control(rows='3', ng-model="comment")
            //- form-group
          //- col-md-4
        //- row
      //- card

      br
      .text-right
        a.btn(data-toggle='modal', ng-click='backToProductPage()') Back to product page
        | &nbsp;
        button.btn.btn-success.btn-lg(id="so_next_button" ng-click="nextButtonClicked()" ng-disabled="!haveRequiredInformation()" href='#') Next
        //a(id="so_link_to_next_page" nZg-hide="true" href='circlebuy-invites.html') next {{haveRequiredInformation()}}
      //- text-right
    //- container
  //- section




block scripts
  // External Script goes here...
  script.
    $(function () {

    });


    /************************************************************
     *
     *    Angular code.
     */
    var app = angular.module('myApp', ['ngSanitize']);

    teaservice.init({
      host: TEASERVICE_HOST,
      port: TEASERVICE_PORT,
      accessToken: TEASERVICE_ACCESS_TOKEN
    });

    // Add the controller for this page
    app.controller('myCtrl', function($scope, teaService, $timeout) {

      // Pre-create variables, so we don't get undefined
      // errors when angular tries to draw the page before
      // our TEA functions have returned with data.
      $scope.sharedOrder = { };
      $scope.creating_a_new_circlebuy = true;
      $scope.so_new_orderSize = 0;
      $scope.so_existing_orderSize = 0;
      $scope.so_alreadyOrdered = 0;

        // This code gets the "product" parameter from the
        // URL so we can use it as productVariantId.
        var productVariantId = NaN;
        var sharedOrderId = NaN;
        window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(str, key, value) {
          key = key.toLowerCase();
          if (key === 'product') {
            productVariantId = parseInt(value);
          } else if (key === 'circlebuy') {
            sharedOrderId = parseInt(value);
          }
        });

        // During development only
        var DEFAULT_PRODUCT_VARIANT_ID = 6180;
        if (isNaN(productVariantId)) {
          productVariantId = DEFAULT_PRODUCT_VARIANT_ID;
        }
        console.log('ZZZ productVariantId=' + productVariantId);
        console.log('ZZZ sharedOrderId=' + sharedOrderId);

        /*
         *  If a circleBuy has been specified, we'll look up
         *  the shared_order first, and use it to find the
         *  productVariantId.
         *
         *  Otherwise, we'll work towards creating a new
         *  shared_order based upon the specified product.
         */

         if ( !isNaN(sharedOrderId)) {

           $scope.sharedOrderId = sharedOrderId;

           /*
            *   VIEW AN EXISTING CIRCLEBUY.
            *
            *   Look up the sharedOrder.
            */
            $scope.creating_a_new_circlebuy = false;
            console.log('looking up shared_order ', sharedOrderId)
           teaService.getSharedOrdersAndSetAngularVariables({
             sharedOrderId: sharedOrderId
           }, $scope, teaService, function(sharedOrders){
             console.log('sharedOrders=', sharedOrders)
             productVariantId = sharedOrders[0].productVariant.productVariantId;
             //alert('prodvar is ' + productVariantId)

             // Now select the productVariant details
             teaService.getProduct({
               productVariantId: productVariantId,
               needPricing: true
             }).then(function(products){

             /*teaService.getProductAndSetAngularVariables({
               productVariantId: productVariantId,
               needPricing: true
             }, $scope, teaService, function gotProduct(product) {*/

               // Back from getting the product details.
               //ZZZZ Handle any error (indicated by product=null)
               $scope.variant = products[0].variants[0]; // 1:1 in Drinkcircle
               $scope.pricingQuantityList = products[0].variants[0].pricing[0].pricingQuantity;
               //$scope.sharedOrder.so_alreadyOrdered = 2;
               //$scope.so_yourQuantity = '1';
               console.log('so=', sharedOrders)

               // Prevent the order size being changed
               $scope.so_existing_orderSize = sharedOrders[0].sharedOrder.quantity;
               $scope.finalOrderSize = sharedOrders[0].sharedOrder.quantity;
               $scope.haveValidOrderSize = true;
               //$scope.so_alreadyOrdered = 2;///ZZZ Calculate this
               return teaService.checkRemainingSharedOrderQuantity(sharedOrderId);
             }).then(function(data){
               //check remaining quantity
               var quantity = data.quantity;
               var remaining = data.remaining;
               $scope.sharedOrder.so_alreadyOrdered = quantity - remaining
               $scope.so_alreadyOrdered = quantity - remaining;
             });

           });
        } else {


          /*
           *    CREATE A NEW CIRCLEBUY
           *
           *    Look up the specified product variant.
           */
          $scope.creating_a_new_circlebuy = true;
          teaService.getProduct({
            productVariantId: productVariantId,
            needPricing: true
          }).then(function(products){

          /*teaService.getProductAndSetAngularVariables({
            productVariantId: productVariantId,
            needPricing: true
          }, $scope, teaService, function gotProduct(product) {*/

            // Back from getting the product details.
            //ZZZZ Handle any error (indicated by product=null)
            $scope.variant = products[0].variants[0]; // 1:1 in Drinkcircle
            $scope.pricingQuantityList = products[0].variants[0].pricing[0].pricingQuantity;
            $scope.so_alreadyOrdered = 0;
          });
        }

        /*
         *  Set the Initial prices
         */
        $scope.calc_price = "$---.--";
        $scope.calc_subtotal = "$---.--";
        $scope.calc_shipping = "$---.--";
        $scope.calc_gst = "$---.--";
        $scope.calc_grandTotal = "$---.--";
        $scope.calc_rrpSaving = "$---.--";
        $scope.calc_shippingSaving = "$---.--";


        // Remember when we have valid values
        $scope.haveValidOrderSize = false;
        $scope.haveValidYourQty = false;
        $scope.haveValidDob = false;
        //$scope.haveValidBillingAddress = false;
        $scope.haveValidShippingAddress = false;

        /*
         *  Look after the Order Size
         */
        $scope.showOrderSizeAlert = function() {
          return $scope.haveValidOrderSize;
        }

        $scope.orderSizeChanged = function() {
          var qty = $scope.so_new_orderSize;
          if (qty) {
            $('#so_new_orderSize_group').addClass('has-success').removeClass('has-error');
            $('#so_new_orderSize_glyphicon').addClass('glyphicon-ok').removeClass('glyphicon-remove');
            qty = parseInt(qty)
            $scope.haveValidOrderSize = true;
            $scope.finalOrderSize = qty;

            // Calculate the prices
            $scope.calculatePrices();
            return true;
          } else {
            $('#so_new_orderSize_group').addClass('has-error').removeClass('has-success');
            $('#so_new_orderSize_glyphicon').addClass('glyphicon-remove').removeClass('glyphicon-ok');
            $("#order-alert-div").addClass('alert-danger').removeClass('alert-success');
            $scope.haveValidOrderSize = false;
            return false;
          }
        }

        /*
         *  Return an array with the same number of elements as
         *  the maximum number in Your Quantity. This is a trick
         *  used with Angular to allow ng-repeat to iterate over
         *  a range of numbers.
         */
        $scope.rangeForYourQuantity = function() {
          if ($scope.creating_a_new_circlebuy) {
            var num = parseInt($scope.so_new_orderSize);
            return new Array(num);
          } else {
            var num = $scope.so_existing_orderSize - $scope.so_alreadyOrdered;
            return new Array(num);
          }
        }

        /*
         *  Work out what instructions to give to the user.
         *  At the same time, display red/green indicators.
         */
        $scope.showYourQuantityAlert = function() {

          // We won't ask for Your-Quantity until we have an Order Size
          if ( !$scope.haveValidOrderSize) {
            return true;
          }

          // Check the "Your Order" quantity.
          var yourQty = $scope.so_yourQuantity;
          if (yourQty) {
            $('#so_yourQuantity_group').addClass('has-success').removeClass('has-error');
            $('#so_yourQuantity_glyphicon').addClass('glyphicon-ok').removeClass('glyphicon-remove');
            yourQty = parseInt(yourQty)
            $scope.finalYourQuantity = yourQty;
            $scope.haveValidYourQty = true;

            // Calculate the prices
            $scope.calculatePrices();
          } else {
            $('#so_yourQuantity_group').addClass('has-error').removeClass('has-success');
            $('#so_yourQuantity_glyphicon').addClass('glyphicon-remove').removeClass('glyphicon-ok');
            $("#order-alert-div").addClass('alert-danger').removeClass('alert-success');
            $scope.haveValidYourQty = false;
          }

          // Return
          return $scope.haveValidYourQty;
        } //showYourQuantityAlert



        /*
         *  See if this order will complete the circleBuy.
         */
        $scope.enoughToCompeteTheOrder = function() {
          if ($scope.haveValidOrderSize && $scope.haveValidYourQty && (authservice.getCurrentUser()!=null)) {
            var totalOrdered = $scope.so_alreadyOrdered + $scope.finalYourQuantity;
            return (totalOrdered >= $scope.finalOrderSize);
          }
          return false;
        }



        /*
         *  Calculate the price of the order.
         *  Note that this is not the final calculation, which
         *  actually occurs on the server. Nevertheless it should
         *  add up to the same amount.
         */
        $scope.calculatePrices = function() {

          if ( !$scope.haveValidOrderSize) return;
          if ( !$scope.haveValidYourQty) return;

          // Collect what we need.
          var orderSize = $scope.finalOrderSize;
          var yourQty = $scope.finalYourQuantity;
          var rrp = $scope.variant.manufacturerPrice;
          var singleCasePrice = $scope.variant.lastPrice;
          var packSize = $scope.variant.componentsQty;
          //console.log('-------- CALCULATE ---------')
          //console.log('orderSize=' + orderSize);
          

          // Find the price for this Order Size
          var priceList = $scope.variant.pricing[0].pricingQuantity;
          /*console.log('priceList=', priceList);*/
          var found = false;
          for (var i = 0; i < priceList.length; i++) {
            var p = priceList[i];
            if (p.quantity == orderSize) {
              var price = p.price;
              var pricingQuantityId = p.pricingQuantityId;
              found = true;
              break;
            }
          }
          if ( !found) {
            alert('Internal Error 387663');
          }

          // Call the server to update the shipping charge.
          var shipping = 10.00;
          var GST_RATE = 0.1000;

          var pricePack = price;
          var priceSubTotal = price * yourQty;
          var subTotalWithShipping = priceSubTotal + shipping;
          var gst = subTotalWithShipping * GST_RATE;
          var grandTotal = subTotalWithShipping + gst;

          var shippingExcl = shipping - (shipping * GST_RATE);
          var shippingIncl = (shipping * GST_RATE);

          //console.log('');
          //console.log('price=' + accounting.formatMoney(price));
          //console.log('pricePack=' + accounting.formatMoney(pricePack));
          //console.log('priceSubTotal=' + accounting.formatMoney(priceSubTotal));
          //console.log('subTotalWithShipping=' + accounting.formatMoney(subTotalWithShipping));
          //console.log('gst=' + accounting.formatMoney(gst));
          //console.log('grandTotal=' + accounting.formatMoney(grandTotal));

          // Do the same calculation for RRP (Recommended Retail Price)
          var rrpPack = rrp;
          var rrpSubtotal = rrp * yourQty;
          var rrpSubtotalExclTac = rrpSubtotal - (rrpSubtotal * GST_RATE);
          var rrpSubtotalWithShipping = rrpSubtotal + shipping;
          var rrpGst = rrpSubtotalWithShipping * GST_RATE;
          var rrpGrandTotal = rrpSubtotalWithShipping + rrpGst;
          //console.log('');
          //console.log('rrp=' + accounting.formatMoney(rrp));
          //console.log('rrpPack=' + accounting.formatMoney(rrpPack));
          //console.log('rrpSubtotal=' + accounting.formatMoney(rrpSubtotal));
          //console.log('rrpSubtotalWithShipping=' + accounting.formatMoney(rrpSubtotalWithShipping));
          //console.log('rrpGst=' + accounting.formatMoney(rrpGst));
          //console.log('rrpGrandTotal=' + accounting.formatMoney(rrpGrandTotal));


          // Work out the savings
          var savingPack = rrpPack - pricePack;
          var savingTotal = rrpGrandTotal - grandTotal;
          //console.log('');
          //console.log('savingPack=' + accounting.formatMoney(savingPack));
          //console.log('savingTotal=' + accounting.formatMoney(savingTotal));

          //console.log('');
          //console.log('pricingQuantityId=' + pricingQuantityId);
          $scope.finalPricingQuantityId = pricingQuantityId;

          // Set the final values.
          $scope.calc_price = accounting.formatMoney(price);
          $scope.calc_subtotal = accounting.formatMoney(priceSubTotal);
          $scope.calc_subtotal_excl_tax = accounting.formatMoney(rrpSubtotalExclTac);
          $scope.calc_shipping = accounting.formatMoney(shipping);
          $scope.calc_shipping_excl_tax = accounting.formatMoney(shippingExcl);
          $scope.calc_shipping_incl_tax = accounting.formatMoney(shippingIncl);
          $scope.calc_gst = accounting.formatMoney(gst);
          $scope.calc_grandTotal = accounting.formatMoney(grandTotal);
          $scope.calc_rrpSaving = accounting.formatMoney(savingTotal);
          $scope.calc_shippingSaving = accounting.formatMoney(rrp);
          $scope.gst_rate = GST_RATE;
          
          
          // Work out the savings:
          //  - from RRP
          //  - volume price
          //  - combined shipping (later)
          //ZZZZ Check with no RRP
          $scope.calc_rrp = accounting.formatMoney(rrp);
          var prefix = "you are saving";
          var savingsDirect = (rrp - singleCasePrice) * (1.0 + GST_RATE);
        //savingsDirect = 0;
          if (savingsDirect <= 0) {
            savingsDirect = 0;
            $scope.calc_savingsDirect = '-';
          } else {
            $scope.calc_savingsDirectPrefix = prefix;
            prefix = ", and you are saving a further";
            $scope.calc_savingsDirect = accounting.formatMoney(savingsDirect);            
          }
          var savingsVolume = (singleCasePrice - price) * (1.0 + GST_RATE);
        //savingsVolume = 0;

          if (savingsVolume <= 0) {
            savingsVolume = 0;
            $scope.calc_savingsVolume = '-';
          } else {
            $scope.calc_savingsVolumePrefix = prefix;
            prefix = ", and you are also saving";
            $scope.calc_savingsVolume = accounting.formatMoney(savingsVolume);
          }
          var savingsShipping = 10;
        savingsShipping = 0;
          if (savingsShipping <= 0) {
            savingsShipping = 0;
            $scope.calc_savingsShipping = '-';
          } else {
            $scope.calc_savingsShippingPrefix = prefix;
            $scope.calc_savingsShipping = accounting.formatMoney(savingsShipping);
          }
          var totalSavings = (savingsDirect + savingsVolume + savingsShipping) * orderSize;
          if (totalSavings <= 0) {
            $scope.calc_totalSavings = '-';
          } else {
            $scope.calc_totalSavings = accounting.formatMoney(totalSavings);
          }


          if ($scope.haveValidOrderSize && $scope.haveValidYourQty) {
            var totalOrdered = $scope.so_alreadyOrdered + $scope.finalYourQuantity;
            return (totalOrdered >= $scope.finalOrderSize);
          }
          return false;
        }


        /*
         *  Date of Birth handling.
         */
        $scope.dateOfBirthMessage = 'You must be 18 or older to buy alcohol in Australia';
        $scope.haveValidDateOfBirth = function() {

          if ($scope.so_over18) {
            $scope.haveValidDob = true;
            return true;
          }
          $scope.haveValidDob = false;
          return false;

          /*
          Old code for validating based on date of birth - we might need it yet.
          if ($scope.so_dateOfBirth) {

            var dob = moment($scope.so_dateOfBirth);
            var turns18 = dob.add(18, 'years');
            var now = moment();
            var threeYearsAgo = moment().subtract(3, 'years');
            var tenYearsAgo = moment().subtract(10, 'years');
            var dob = moment($scope.so_dateOfBirth);

            if (now.isBefore(dob)) {
              $scope.dateOfBirthMessage = 'You haven\'t been born yet!';
              $scope.haveValidDob = false;
              return false;
            }
            else if (dob.isAfter(threeYearsAgo)) {
              $scope.dateOfBirthMessage = 'You should learn to walk before you drink!';
              $scope.haveValidDob = false;
              return false;
            }
            else if (dob.isAfter(tenYearsAgo)) {
              $scope.dateOfBirthMessage = 'Go climb a tree or something!';
              $scope.haveValidDob = false;
              return false;
            }
            else if (now.isBefore(turns18)) {
              $scope.dateOfBirthMessage = 'Sorry, you are too young to buy alcohol.';
              $scope.haveValidDob = false;
              return false;
            }

            // Is over 18 years old
            $scope.haveValidDob = true;
            return true;
          }

          // dob not entered yet
          $scope.haveValidDob = false;
          return false;
          */
        }


        //- /*
        //-  *  Billing Address handling.
        //-  */
        //-  $scope.haveBillingAddress = function() {
        //-    return ($scope.billingAddressId) ? true : false;
        //-  }
        //- $scope.billingAddressId = null;
        //- $scope.setBillingAddress = function(addressId) {
        //-   $scope.billingAddressId = addressId;
        //-   $scope.haveValidBillingAddress = true;
        //-   $('.so_billing_address_card').removeClass('so_chosen_address');
        //-   $('.so_billing_address_card .alert').addClass('alert-warning').removeClass('alert-success');
        //-   $('.so_billing_address_card[so_address_id='+addressId+']').addClass('so_chosen_address');
        //-   $('.so_billing_address_card[so_address_id='+addressId+'] .alert').removeClass('alert-warning').addClass('alert-success');
        //- }


        /*
         *  Ship-To address handling.
         */
        $scope.shiptoAddressId = null;
        $scope.setShiptoAddress = function(addressId) {
          $scope.shiptoAddressId = addressId;
          $scope.haveValidShippingAddress = true;
          $('.so_shipto_address_card').removeClass('so_chosen_address');
          $('.so_shipto_address_card .alert').addClass('alert-warning').removeClass('alert-success');
          $('.so_shipto_address_card[so_address_id='+addressId+']').addClass('so_chosen_address');
          $('.so_shipto_address_card[so_address_id='+addressId+'] .alert').removeClass('alert-warning').addClass('alert-success');
        }
        $scope.haveShiptoAddress = function() {
          return ($scope.shiptoAddressId) ? true : false;
        }



        /*
         *  Next button handling.
         */
        $scope.haveRequiredInformation = function() {
          $scope.haveAllTheRequiredInformation = (
            $scope.loggedIn
            && $scope.haveValidOrderSize
            && $scope.haveValidYourQty
            && $scope.haveValidDob
            //&& $scope.haveValidBillingAddress
            && $scope.haveValidShippingAddress
          );
          return $scope.haveAllTheRequiredInformation;
        }

        // Actual handling of the next button
        $scope.nextButtonClicked = function() {

          // In case the Next button somehow becomes enabled.
          if ( !$scope.haveAllTheRequiredInformation) {
            return false;
          }

          // Get details of the current user.
          var user = authservice.getCurrentUser();
          var customerId = user.id;
          var name = user.firstname;
          var capitalized = name.replace(/\w\S*/g, function(txt){
            // Handles multi-word names
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
          });
          var ownerLabel = capitalized + "'s";

          console.log('customerId=' + customerId);
          console.log('ownerLabel=' + ownerLabel);

          if ($scope.creating_a_new_circlebuy) {
            /*
             *  Create a shared order, then the customer order.
             */
             teaService.newSharedOrder({
               "customerId": customerId,
               "pricingQuantityId": $scope.finalPricingQuantityId,
               "quantity": $scope.finalOrderSize,
               "ownerLabel": ownerLabel,
               "shipToAddressRule": 'P', // Preferred - prefer orders ship to shared order address
               "shipToSharedOrderAddress": true
               //"expiresAt": "1970-00-00T00:00:00.000Z"
            }, $scope, teaService).then(function(data){

              if (data) {
                /*
                *  Create a circlebuy, then the customer order.
                */
                newSharedOrderId = data.sharedOrderId;
                //alert('New CircleBuy number is ' + newSharedOrderId);
                var circleBuy = createOrder(newSharedOrderId, customerId, productVariantId, $scope);

                  teaService.addCircleBuy(circleBuy).then(function(data){
                    if(data) {
                      var newUrl = 'circlebuy-invites.html?circlebuy=' + newSharedOrderId;
                      console.log('Will jump to: ' + newUrl)
                      window.location.href = newUrl;
                    }
                  });

                } else {
                    // Could not create the new order.
                    // An error message will have already been logged.
                    alert('An error occurred creating the circlebuy. Please try again later.');
                }

               return false;
             });

          } else {
            console.log('ok 0b');
            /*
             *  Add a customer order to the existing circlebuy.
             */

              var sharedOrderId = $scope.sharedOrderId;
              var circleBuy = createOrder(sharedOrderId, customerId, productVariantId, $scope);

                teaService.addCircleBuy(circleBuy).then(function(data){
                  console.log("checking remaining circle buys");

                  //check to see how many left in the circle buy
                  return teaService.checkRemainingSharedOrderQuantity(sharedOrderId);
                }).then(function(data){
                  var remaining = data.remaining;
                  if(remaining <= 0){
                    console.log("closing circle buy");
                    //time to close the circle buy
                    teaService.completeSharedOrder(sharedOrderId);
                  }
                }).then(function(){
                   var newUrl = 'circlebuy-requests.html';
                      console.log('Will jump to: ' + newUrl)
                      window.location.href = newUrl;
                });

            //alert('not creating order yet!');
          }
          return false;

        } // nextButtonClicked()


        /*
         *  Handler for "Back to product page" button.
         */
        $scope.backToProductPage = function submitProductRatingAndReview() {
          // Jump back to the product screen.
          window.location = '/productdetails2.html?product='+productVariantId;
        };


        /*
         *  Convenience function used with ng-repeat to iterate X times
         */
        $scope.range = function(x) {
          if (x) {
            var num = parseInt(x)
            if (num < 0) num = 0;
            return new Array(num);
          }
          return [ ]; // num is undefined
        }


            /*
             *  Set up the login part at the top of the page.
             */
            authservice.init({
              // Environment specific values are defined in environment.js
              host: AUTHSERVICE_HOST,
              port: AUTHSERVICE_PORT,
              tenant: AUTHSERVICE_TENANT,
              pretend: AUTHSERVICE_USE_DUMMY_LOGIN,
              onUserChange: function(user, ttuat, fromCookie) {
                // If the current user came from the cookie, reload it
                //if (fromCookie) {
                //  console.log('Reloading user details (cookie details are just a summary)');
                //  return authservice.reloadUser();
                //}
              }
            });


        /*
         *  Set up the login part at the top of the page.
         */
        authservice.init({
          // Environment specific values are defined in environment.js
          host: AUTHSERVICE_HOST,
          port: AUTHSERVICE_PORT,
          tenant: AUTHSERVICE_TENANT,
          pretend: AUTHSERVICE_USE_DUMMY_LOGIN,
          onUserChange: function(user, ttuat, fromCookie) {
            // If the current user came from the cookie, reload it
            if (fromCookie) {
              console.log('Reloading user details (cookie details are just a summary)');
              return authservice.reloadUser();
            }
            if (user) {

              // Use $timeout, which does the same as $apply, but gives
              // this controller definition function time to complete.
              // Otherwise we get an 'inprog' error from Angular.
              $timeout(function(){
                $scope.loggedIn = true;
              }, 100);

            } else {
              $timeout(function(){
                $scope.loggedIn = false;
              }, 100);
            }
          }
        });
        console.log('Current user:', authservice.getCurrentUser());

    });

    function createOrder(sharedOrderId, customerId, productVariantId, angularScope){
      var circleBuy = {
            "customerId" : customerId,
            "sharedOrderId" : sharedOrderId,
            "flow" : "PRE",
            "action" : "A",
            "marketplace" : 1,
            "currencyId" : 22,
            "amountExclTax" : accounting.unformat(angularScope.calc_subtotal),
            "taxType" : "G",
            "taxAmount" : accounting.unformat(angularScope.calc_gst),
            "amountInclTax" : accounting.unformat(angularScope.calc_subtotal),
            "notes" : angularScope.comment,
            "shipToSharedOrderAddress": true, // Tempory hack ZZZZZ
            "items" : [
              {
                "productVariantId" : productVariantId,
                "description" : "sample",
                "unitPrice" : accounting.unformat(angularScope.calc_price),
                "quantity" : angularScope.so_yourQuantity,
                "taxExempted" : false,
                "priceIncludesTax" : true,
                "taxRate" : angularScope.gst_rate,
                "amountExclTax" : accounting.unformat(angularScope.calc_subtotal),
                "taxAmount" : accounting.unformat(angularScope.calc_gst),
                "amountInclTax" : accounting.unformat(angularScope.calc_subtotal),
                "shippedQuantity" : null
              }
            ],
            "shippingCost" : {
              "unitPrice" : accounting.unformat(angularScope.calc_shippingSaving),
              "quantity" : 1,
              "taxExempted" : false,
              "priceIncludesTax" : true,
              "taxRate" : angularScope.gst_rate,
              "amountExclTax" : accounting.unformat(angularScope.calc_shipping_excl_tax),
              "taxAmount" : accounting.unformat(angularScope.calc_shipping_incl_tax),
              "amountInclTax" : accounting.unformat(angularScope.calc_shipping)
            }
          }
          return circleBuy;
    }

  //- script.
