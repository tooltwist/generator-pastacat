extends ./layout/layout_main.pug

block css
  style.
    .logged-in {
      display: block !important;
    }
    .logged-out {
      display: none;
    }
  //- style


block content

  section.userprofile.simple(Zng-app="myApp" Zng-controller="myCtrl", min=0, max=100)
    .container
      .row
        .col-md-12
          h3.title(ng-cloak) Review for {{variant0.name}}
        //- col-md-12
      //- row
      .card
        p
        .row
          .col-md-8
            strong.green Your Rating
            br
            small
              | How do you rate this wine, in terms of "value for money"?
              br
              br
            .form-group
              select(ng-model='rating' ng-options="x for x in ratingOptions").inline
              | &nbsp;&nbsp;out of 100
            //- form-group
            small
              br
              | (We call the average of these ratings "Drinkpoints")
              br
              br
          .col-md-4
            .text-right
              a.btn.btn-success(ZZZdata-toggle="modal", ng-click="submitProductRating()") Submit Rating only
      p &nbsp;


      .card
        p
          strong.green Your Review (optional)
        //- p
        small
          ol
            li Describe the product and specific details of your experience.
            li Be respectful.
            li Focus on the facts.
        //- ol
        .row
          .col-md-6
            .form-group
              label Add a heading for your review
              input.form-control(ng-model="reviewHeading", type='text', id='reviewHeading')
            //- form-group
          //- col-md-6
        //- row
        .form-group
          label Your review
          textarea.form-control(ng-model="reviewTxt", rows='5', id='review')
        //- form-group
        .checkbox
          label
            input(type='checkbox', ng-model="recommend", id='recommend-checkbox')
            | &nbsp;I would recommend this drink to a friend
          //- label
        //- checkbox
        .text-right
          a.btn(data-toggle='modal', ng-click='backToProductPage()') Back to product page
          | &nbsp;
          a.btn.btn-success(data-toggle='modal', ng-click='submitProductRatingAndReview()') Submit Rating and Review
        //- text-right
      //- card
      input#review-element-id(type='hidden', value='')

    //- container
  //- section

block scripts
  // External Script goes here...
  script(src='assets/vendor/crowdhound/chwritereview.js', type="text/javascript")
  script.

    /*
     *    Set up Angular.
     */
    var app = angular.module('myApp', ['ngSanitize', 'pastac-login']);

    teaservice.init({
      host: TEASERVICE_HOST,
      port: TEASERVICE_PORT,
      accessToken: TEASERVICE_ACCESS_TOKEN
    });

    app.controller('pageCtrl', function($scope, $http, teaService) {


      // This code gets the "product" parameter from the URL so we can use it as productVariantId.
      var productVariantId = NaN;
      window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(str, key, value) {
        if (key === 'product') {
          productVariantId = parseInt(value);
        }
      });

      // We should not be here without a product specified
      if (isNaN(productVariantId) || productVariantId <= 0) {
        window.location = '/index.html';
        return;
      }

      // Values for the rating dropdown.
      $scope.noRatingSpecified = '--';
      //$scope.ratingOptions = [ '--', '100', '90', '80', '70', '60', '50', '40', '30', '20', '10', '0' ];
      $scope.ratingOptions = [ '--',
            '100', '95', '90', '85', '80', '75', '70', '65', '60', '55',
            '50', '45', '40', '35', '30', '25', '20', '15', '10', '5', '0' ];
      $scope.rating = '--';


      /*
       *  Get the product details, just so we can put a heading on the page.
       */
      var params = {
        productVariantId: productVariantId
      };
      teaService.getProduct(params).then(function(products) {

        // Display the product details
        console.log('\n\n\nREPLY FROM getProduct:', products);
        if (products && products.length > 0 && products[0].variants.length > 0) {

          // In Drinkcircle there is one-to-one between products and variants.
          $scope.productVariantId = productVariantId;
          $scope.product0 = products[0];
          $scope.variant0 = products[0].variants[0];
        } else {
          // Could not find the product.
          alert('Unknown product ' + productVariantId);
          window.location = '/index.html';
          return;
        }
      });


      /*
       *  Initialize Authservice.
       *  Once we have current user details, we can start displaying
       *  the rating and review for the current user.
       */
      authservice.init({
        // Environment specific values are defined in environment.js
        host: AUTHSERVICE_HOST,
        port: AUTHSERVICE_PORT,
        tenant: AUTHSERVICE_TENANT,
        pretend: AUTHSERVICE_USE_DUMMY_LOGIN,
        $http: $http, // Use Angular's $http for AJAX calls
        onUserChange: function(user, ttuat, fromCookie) {

          /*
           *  This onUserChange callback is called when we initialise Authservice
           *  and also whenever the current user is changed. If the user is
           *  logged out the both user and ttuat will be null.
           *
           *  If the current user record came from the cookie then it will be
           *  a cut down version and will not have all the details we need. It
           *  may also be out of date, so let's reload it from Authservice.
           *  This will also ensure that the login has not timed out. Reloading
           *  will cause this function to be called again (without fromCookie set).
           */
          if (fromCookie) {
            console.log('Reloading user details (cookie details are just a summary)');
            return authservice.reloadUser();
          }
          if (user == null) {
            console.log('logged out');
            window.location = '/productdetails2.html?product='+productVariantId;
            return;
          }

          console.log('Current user:', authservice.getCurrentUser());
          console.log('User access token:', authservice.getUserAccessToken());



          /*
           *  Okay, we are logged in and have the current user details.
           *
           *  Initialize CrowdHound, and then start getting stuff.
           */
          crowdhoundConfig = {
            serverUrl : '//' + CROWDHOUND_HOST + ':' + CROWDHOUND_PORT,
            apiVersion : CROWDHOUND_VERSION,
            tenantId : CROWDHOUND_TENANT,
            debug: false,
            //authenticationToken : authservice.getUserAccessToken(),
            authenticationToken: ttuat,
            urlive : false,
            flat: false,
            textonly: false,
            // cookers: {
            //cook_avatars : cookAvatars, //definition is in the curia_js widget
            //cook_ratings : ProductReview.cookRatings
            //},
            //themes : {
            //"productReview": {
            //"product-reviews_0" : "#reviewList",
            //"review_0" : "#review",
            //"options":  { flat: false, textonly: true, readonly: false },
            //}

            //}
          };
          CrowdHound.init(crowdhoundConfig, function afterCuriaInit() {

            /*
             *  Select any existing review for this current user.
             */
            var userId = authservice.getCurrentUserId();
            var anchor = "$product-"+productVariantId+"-reviewer-"+userId;
            CrowdHound.select(anchor, function(err, selection) {
              if (err) {
                // Error contacting service. This should not happen.
                alert('An error occurred while looking for any existing review.');
                console.log('Had a problem selecting the review.', err);
                window.location = '/productdetails2.html?product='+productVariantId;
                return;
              }

              // No error, put the review on the screen via the Angular model.
              //console.log('selection: ', selection);
              if (selection && selection.elements.length >= 1) {

                var element = selection.elements[0];
                $scope.reviewHeading = element.title;
                $scope.reviewTxt = element.description;
                $scope.recommend = element.title;
                $scope.recommend = (element.summary == 'true');
                $scope.$apply();
              }
            });// select

            /*
             *  Load any existing rating by the current user.
             */
            var anchor = '$product-rating-' + productVariantId;
            CrowdHound.getMyVotes(anchor, function(err, votes) {
              if (err) {
                console.log('Error while selecting my votes:', err);
                return;
              }

              // Find this user's previous vote.
              //console.log('got my rating votes:', err, votes);
              for (var i = 0; i < votes.length; i++) {
                if (votes[i].aspect == 'percentage') {
                  $scope.rating = ''+votes[i].score; // We use strings
                  $scope.$apply();
                  break;
                }
              }
            });// getMyVotes
          });// CrowdHound.init
        }// onUserChange
      });// authservice.init


      /*
       *  Handler for "Back to product page" button.
       */
      $scope.backToProductPage = function submitProductRatingAndReview() {
        // Jump back to the product screen.
        window.location = '/productdetails2.html?product='+productVariantId;
      };


      /*
       *  Handler for "Save Rating and Review" button.
       */
      $scope.submitProductRatingAndReview = function submitProductRatingAndReview() {
        // Check they've selected a user rating.
        var rating = $scope.rating;
        if (rating == $scope.noRatingSpecified) {
          bootbox.alert("Please select a rating value for this product.", function(){});
          return;
        }

        //validate if user has entered a title, description or would recommend this to a friend
        var heading = $scope.reviewHeading;
        var review = $scope.reviewTxt;
        var recommended = $scope.recommend;

        if((heading === null || heading === '')
         && (review === null || review === '')
         && recommended == false){
            bootbox.alert("Please provide a title or a description for the review.", function(){});
            return;
        }

        // Save the review.
        chwritereview.saveReview(productVariantId, heading, review, recommended, function(err) {
          if (err) {
            alert('Unable to save product review');
            console.log('Unable to save review: ', err);
          }

          // Now save the rating.
          chwritereview.saveRating(productVariantId, rating, function(err) {
            if (err) {
              alert('Unable to save product rating');
              console.log('Unable to save rating: ', err);
            } else {
              // Review has been saved. Jump back to the product screen.
              window.location = '/productdetails2.html?product='+productVariantId;
            }
          });// saveRating
        });// saveReview
      };// $scope.submitProductRatingAndReview


      /*
       *  Handler for "Save Rating" (but not review) button.
       */
      $scope.submitProductRating = function submitProductRating() {
        // Check they've selected a user rating.
        var rating = $scope.rating;
        if (rating == $scope.noRatingSpecified) {
          bootbox.alert("Please select a rating value for this product.", function(){});
          return;
        }

        // Save the rating.
        chwritereview.saveRating(productVariantId, rating, function(err) {
          if (err) {
            alert('Unable to save product rating');
            console.log('Unable to save rating: ', err);
          } else {
            // Review has been saved. Jump back to the product screen.
            window.location = '/productdetails2.html?product='+productVariantId;
          }
        });// saveRating
      };// $scope.submitProductRating()


    }); //app.controller('myCtrl')

  //- script.
//- block scripts
